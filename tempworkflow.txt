# name: Advanced CI/CD Pipeline

# on:
#   push:
#     branches: [ main, master ]
#   pull_request:
#     branches: [ main, master ]
#   workflow_dispatch: # Allow manual triggering

# env:
#   NODE_VERSION: '18'

# jobs:
#   # Security and Dependency Check
#   security-check:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
      
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#         cache: 'npm'
        
#     - name: Install dependencies
#       run: npm ci
      
#     - name: Run security audit
#       run: npm audit --audit-level moderate
      
#     - name: Check for outdated dependencies
#       run: npm outdated || true

#   # Lint and Test Job
#   lint-and-test:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
      
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#         cache: 'npm'
        
#     - name: Install dependencies
#       run: npm ci
      
#     - name: Run linter
#       run: npm run lint
      
#     - name: Run tests with coverage
#       run: npm run test:run -- --coverage
      
#     - name: Upload coverage reports
#       uses: codecov/codecov-action@v3
#       if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
#       with:
#         token: ${{ secrets.CODECOV_TOKEN }}
#         fail_ci_if_error: false

#   # Build and Quality Check
#   build:
#     runs-on: ubuntu-latest
#     needs: [security-check, lint-and-test]
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
      
#     - name: Setup Node.js
#       uses: actions/setup-node@v4
#       with:
#         node-version: ${{ env.NODE_VERSION }}
#         cache: 'npm'
        
#     - name: Install dependencies
#       run: npm ci
      
#     - name: Build project
#       run: npm run build
      
#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: dist-files
#         path: dist/
#         retention-days: 7

#   # Deploy to Staging (for PRs)
#   deploy-staging:
#     needs: build
#     runs-on: ubuntu-latest
#     if: github.event_name == 'pull_request'
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
      
#     - name: Download build artifacts
#       uses: actions/download-artifact@v4
#       with:
#         name: dist-files
#         path: dist/
        
#     - name: Deploy to staging environment
#       run: |
#         echo "Deploying to staging environment..."
#         # Add your staging deployment logic here
#         # This could be deploying to a staging Render service, Vercel preview, etc.

#   # Deploy to Production
#   deploy-production:
#     needs: build
#     runs-on: ubuntu-latest
#     if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push'
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
      
#     - name: Download build artifacts
#       uses: actions/download-artifact@v4
#       with:
#         name: dist-files
#         path: dist/
        
#     - name: Deploy to Render
#       env:
#         RENDER_TOKEN: ${{ secrets.RENDER_TOKEN }}
#         RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
#       run: |
#         echo "Deploying to production..."
#         curl -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
#           -H "Authorization: Bearer $RENDER_TOKEN" \
#           -H "Content-Type: application/json" \
#           -d '{"clearCache": "do_not_clear"}'
        
#     - name: Notify deployment status
#       if: always()
#       run: |
#         if [ ${{ job.status }} == 'success' ]; then
#           echo "✅ Production deployment successful!"
#         else
#           echo "❌ Production deployment failed!"
#         fi 